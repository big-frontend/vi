
package pink.madis.apk.arsc;

import java.util.Map;
import javax.annotation.Nullable;

// Generated by com.google.auto.value.processor.AutoValueProcessor
 final class AutoValue_TypeChunk_Entry extends TypeChunk.Entry {

  private final int headerSize;
  private final int flags;
  private final int keyIndex;
  private final ResourceValue value;
  private final Map<Integer, ResourceValue> values;
  private final int parentEntry;
  private final TypeChunk parent;

  AutoValue_TypeChunk_Entry(
      int headerSize,
      int flags,
      int keyIndex,
      ResourceValue value,
      Map<Integer, ResourceValue> values,
      int parentEntry,
      TypeChunk parent) {
    this.headerSize = headerSize;
    this.flags = flags;
    this.keyIndex = keyIndex;
    if (value == null) {
      throw new NullPointerException("Null value");
    }
    this.value = value;
    if (values == null) {
      throw new NullPointerException("Null values");
    }
    this.values = values;
    this.parentEntry = parentEntry;
    if (parent == null) {
      throw new NullPointerException("Null parent");
    }
    this.parent = parent;
  }

  @Override
  public int headerSize() {
    return headerSize;
  }

  @Override
  public int flags() {
    return flags;
  }

  @Override
  public int keyIndex() {
    return keyIndex;
  }

  @Override
  public ResourceValue value() {
    return value;
  }

  @Override
  public Map<Integer, ResourceValue> values() {
    return values;
  }

  @Override
  public int parentEntry() {
    return parentEntry;
  }

  @Override
  public TypeChunk parent() {
    return parent;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof TypeChunk.Entry) {
      TypeChunk.Entry that = (TypeChunk.Entry) o;
      return (this.headerSize == that.headerSize())
           && (this.flags == that.flags())
           && (this.keyIndex == that.keyIndex())
           && (this.value.equals(that.value()))
           && (this.values.equals(that.values()))
           && (this.parentEntry == that.parentEntry())
           && (this.parent.equals(that.parent()));
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h = 1;
    h *= 1000003;
    h ^= this.headerSize;
    h *= 1000003;
    h ^= this.flags;
    h *= 1000003;
    h ^= this.keyIndex;
    h *= 1000003;
    h ^= this.value.hashCode();
    h *= 1000003;
    h ^= this.values.hashCode();
    h *= 1000003;
    h ^= this.parentEntry;
    h *= 1000003;
    h ^= this.parent.hashCode();
    return h;
  }

}
